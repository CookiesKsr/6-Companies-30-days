//microsoft

https://leetcode.com/problems/count-number-of-nice-subarrays/description/

class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
//changing the array to convert the problem into 560. Subarray Sum Equals K

        for(int i=0;i<nums.length ; i++)
        {
            if(nums[i]%2==0)
            {
                nums[i]=0;
            }
            else
            {
                nums[i]=1;
            }
        }


        return subarraySum(nums, k);
    }

    public int subarraySum(int[] nums, int k) 
    {
        int sum = 0;
        int ans = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        for(int j=0;j<nums.length;j++){
            sum += nums[j];
            if(map.containsKey(sum -k)){
                ans += map.get(sum-k);
            }
            map.put(sum,map.getOrDefault(sum,0)+1);
        }
        return ans;
    }

}
